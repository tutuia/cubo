#include <Servo.h>

// servos para manipulação do cubo
Servo servo_F;
Servo servo_R;
Servo servo_B;
Servo servo_L;

//servos de posição
Servo servoPos_F;
Servo servoPos_R;
Servo servoPos_B;
Servo servoPos_L;

int pos = 0;

void setup(){

  delay(2000);
  Serial.begin(9600);
  Serial.print("oi");

  servoPos_F.attach(8);
  servoPos_R.attach(9);
  servoPos_B.attach(10);
  servoPos_L.attach(11);

  servo_F.attach(2);
  servo_R.attach(3);
  servo_B.attach(4);
  servo_L.attach(5);

  servo_F.write(0);
  servo_L.write(0);
  servo_B.write(0);
  servo_R.write(0);

  recebe_cubo();
  //U_counterClock();
  turn_up_2front();
  turn_front_2up();
  solta_cubo();
}

///////////////////////////////////////////////////// Movements planning //////////////////////////////////////////////////////////////////////////

int find_face(char color){
  char faces_color[] = "wogrby";
  int i;
  
  for(i = 0; i<6; i++){
    if(faces_color[i] == color){ 
      break;
      }
  }
  return i;  
}

void putting_middle_in_place(int whereTo){
  if(whereTo < 8){
    if(whereTo == 0){
      //implementar o Lw <<<<<<<<<<<<-----------
      }
      else if(whereTo == 1){
        swap();
      }
      else if(whereTo == 2){
        // ??? <<<<<<<<---------------
      }
      else if(whereTo == 3){
        L_clockwise();
        L_clockwise();
        
        turn_up_2front();
        turn_up_2front();
        R_clockwise();
        R_clockwise();
        L_counterClock();
        L_counterClock();
        swap();
        turn_up_2front();
        turn_up_2front();
        R_clockwise();
        R_clockwise();
        L_counterClock();
        L_counterClock();
        
        L_clockwise();
        L_clockwise();
        
      }
      else if(whereTo == 4){
        turn_up_2front();
        R_clockwise();
        L_counterClock();
        swap();
        turn_front_2up();
        R_counterClock();
        L_clockwise();
        
      }
      else if(whereTo == 5){
        L_counterClock();
        
        turn_up_2front();
        R_clockwise();
        L_counterClock();
        swap();
        turn_front_2up();
        R_counterClock();
        L_clockwise();
        
        L_clockwise();
        
      }
      else if(whereTo == 6){
        L_clockwise();
        L_clockwise();
        
        turn_up_2front();
        R_clockwise();
        L_counterClock();
        swap();
        turn_front_2up();
        R_counterClock();
        L_clockwise();
        
        L_clockwise();
        L_clockwise();
        
      }
      else if(whereTo == 7){
        L_clockwise();
        
        turn_up_2front();
        R_clockwise();
        L_counterClock();
        swap();
        turn_front_2up();
        R_counterClock();
        L_clockwise();
        
        L_counterClock();
      }
    }
  else if(whereTo > 15){
    if(whereTo == 16){
      F_counterClock();
      turn_clockwise();

      D_clockwise();

      turn_front_2up();
      R_counterClock();
      L_clockwise();
      swap();
      turn_up_2front();
      R_clockwise();
      L_counterClock();

      D_counterClock();

      F_clockwise();
      turn_counterClock();
      
      }
      else if(whereTo == 17){
        L_counterClock();

        turn_up_2front();
        turn_up_2front();
        R_clockwise();
        R_clockwise();
        L_counterClock();
        L_counterClock();
        swap();
        turn_up_2front();
        turn_up_2front();
        R_clockwise();
        R_clockwise();
        L_counterClock();
        L_counterClock();
        
        L_clockwise();
        
      }
      else if(whereTo == 18){
        D_counterClock();

        turn_front_2up();
        R_counterClock();
        L_clockwise();
        swap();
        turn_up_2front();
        R_clockwise();
        L_counterClock();

        D_clockwise();
        
      }
      else if(whereTo == 19){
        
      }
      else if(whereTo == 20){
      }
      else if(whereTo == 21){
      }
      else if(whereTo == 22){
      }
      else if(whereTo == 23){
      }
    }
  else{
    if(whereTo == 8){
      }
      else if(whereTo == 9){
      }
      else if(whereTo == 10){
      }
      else if(whereTo == 11){
      }
      else if(whereTo == 12){
      }
      else if(whereTo == 13){
      }
      else if(whereTo == 14){
        turn_front_2up();
        R_counterClock();
        L_clockwise();
        swap();
        turn_up_2front();
        R_clockwise();
        L_counterClock();
        
      }
      else if(whereTo == 15){
      }
    }
  
  
  }


void map_colors(){
//  char faces_color[] = "wogrby";
  char corner_colors[] ="wwwwooooggggrrrrbbbbyyyy";
  char middle_colors[] ="wgwboooogygwrrrrbybwybyg";
//  char middle_colors[] ="wwwwooooggggrrrrbbbbyyyy";
  int loop_time = 24;
  char keep_piece[3];
  int keep_pos;

  int piece[24] = {17, 13, 9, 5, 4, 12, 24, 18, 3, 16, 21, 6, 2, 20, 22, 10, 1, 8, 23, 14, 11, 15, 19, 7};

  int face_position, face_2nd_position;
  int buffer_position = 2;
  int buffer_2nd_position;
  char buffer_color;
  int pos1;

  while(loop_time > 0){// botar um loop para enquanto o contador de zeros não zerar

    if(piece[buffer_position] == 0){
      for(int i=0;i<24;i++){
        if(piece[i] != 0){
          // mandar i para o buffer <<<-----------
          //verificar paridade??
          buffer_position = i;
          keep_piece[0] = middle_colors[buffer_position];
          keep_piece[1] = middle_colors[piece[buffer_position]-1];
          keep_pos = buffer_position;
          Serial.print("\n Posição salva: ");
          Serial.print(buffer_position); 

          break;
          }
        }
     }
     
    buffer_color = middle_colors[buffer_position]; // cor do buffer
    face_position = find_face(buffer_color); // face em que deveria estar
    buffer_2nd_position = piece[buffer_position] - 1;   //posição da peça no vetor
    buffer_color = middle_colors[buffer_2nd_position]; // cor da peça
    face_2nd_position = find_face(buffer_color);
    
    for(int i=0; i<4; i++){
      //pos1 = piece[(face_position * 4) + i] - 1;
      pos1 = (face_position * 4) + i;
      for(int j =0; j<4; j++){
        if(piece[pos1]-1 == ((face_2nd_position * 4)+j)){
         
          //CHAMA A FUNÇÃO PARA RESOLVER <<<----------
          if(buffer_position != pos1){
            Serial.print("\n Ir para pos1: ");
            Serial.print(pos1);
            }
          /*
          else{ 
            Serial.print("\n No lugar ");
          }
          */
          //coloca zero nas posições das peças no vetor piece -->verificar se já tinha zero no lugar
          //atualizar o contador de zero --> para saber se todas as posições estão corretas
          if(piece[buffer_position] != 0){
            piece[buffer_position] = 0;
            loop_time = loop_time - 1;
            }
          if(piece[buffer_2nd_position] != 0){
            piece[buffer_2nd_position] = 0;
            loop_time = loop_time - 1;
            } 
            
          //atualizar o buffer com os novos valores e posição
          if(loop_time != 0) buffer_position = pos1;
          i = 4;
          break;
        } else if(i== 3 and j == 3 and buffer_position != keep_pos){
            buffer_position = keep_pos;
            Serial.print("\n Ir para pos keep: ");
            Serial.print(buffer_position);
          }
      }

    }// fim for
    Serial.print("\n ------------------------------ \n");
    if((middle_colors[buffer_position] == keep_piece[0])and(middle_colors[piece[buffer_position]-1] == keep_piece[1])){
      piece[buffer_position] = 0;
      piece[buffer_2nd_position] = 0;
      buffer_position = keep_pos;
      loop_time = loop_time - 2;
      }
      
   }
   //Serial.print("\n\n piece: ");
   //for(int i = 0; i<24; i++) Serial.print(piece[i]);
   Serial.print("fim");
   // Verificar paridade <<<<<----------
    
  }
 

  
/////////////////////////////////////////////////////////// Servo Moves /////////////////////////////////////////////////////////////////  

void swap(){
  R_clockwise();
  U_clockwise();
  R_counterClock();
  
  F_counterClock();
  
  R_clockwise();
  U_clockwise();
  R_counterClock();

  U_counterClock();
  R_counterClock();
  F_clockwise();
  R_clockwise();
  R_clockwise();

  U_counterClock();
  R_counterClock();
  U_counterClock();
  
  }

////////////////////////////
void U_clockwise(){
  turn_clockwise();
  R_clockwise();
  turn_counterClock();
  
   }

void U_counterClock(){
  turn_clockwise();
  R_counterClock();
  turn_counterClock();
  
   }

void D_clockwise(){
  turn_clockwise();
  L_clockwise();
  turn_counterClock();
  
   }

void D_counterClock(){
  turn_clockwise();
  L_counterClock();
  turn_counterClock();
  
   }

void E_clockwise(){
  turn_front_2up();
  F_counterClock();
  B_clockwise();
  turn_clockwise();
  turn_up_2front();
  }

void E_counterClock(){
  turn_front_2up();
  B_counterClock();
  F_clockwise();
  turn_clockwise();
  turn_up_2front();
  }
   
void turn_up_2front(){
  servoPos_R.write(0);
  delay(1000);
  servo_R.write(170);
  delay(1000);
  servoPos_R.write(90);
  delay(1000);
  servo_R.write(65);
  delay(1000);
  
  servoPos_B.write(0);
  servoPos_F.write(0);
  delay(1000);
  
  servo_L.write(80);
  servo_R.write(0);
  delay(1000);
  
  servoPos_B.write(90);
  servoPos_F.write(90);
  delay(1000);
  
  
  servoPos_L.write(0);
  delay(1000);
  servo_L.write(0);
  delay(1000);
  servoPos_L.write(90);
  delay(1000);
  servo_R.write(90);
  delay(1000);
  servoPos_R.write(0);
  delay(1000);
  servo_R.write(0);
  delay(1000);
  servoPos_R.write(90);
  delay(1000);
  
  }

void turn_front_2up(){
  servoPos_L.write(0);
  delay(1000);
  servo_L.write(170);
  delay(1000);
  servoPos_L.write(90);
  delay(1000);
  servo_L.write(65);
  delay(1000);
  
  servoPos_B.write(0);
  servoPos_F.write(0);
  delay(1000);
  
  servo_R.write(80);
  servo_L.write(0);
  delay(1000);
  
  servoPos_B.write(90);
  servoPos_F.write(90);
  delay(1000);
  
  
  servoPos_R.write(0);
  delay(1000);
  servo_R.write(0);
  delay(1000);
  servoPos_R.write(90);
  delay(1000);
  servo_L.write(90);
  delay(1000);
  servoPos_L.write(0);
  delay(1000);
  servo_L.write(0);
  delay(1000);
  servoPos_L.write(90);
  delay(1000);
  
  }
   
void turn_clockwise(){
  servoPos_B.write(0);
  delay(1000);
  servo_B.write(170);
  delay(1000);
  servoPos_B.write(90);
  delay(1000);
  servo_B.write(65);
  delay(1000);
  
  servoPos_R.write(0);
  servoPos_L.write(0);
  delay(1000);
  
  servo_F.write(80);
  servo_B.write(0);
  delay(1000);
  
  servoPos_R.write(90);
  servoPos_L.write(90);
  delay(1000);
  
  
  servoPos_F.write(0);
  delay(1000);
  servo_F.write(0);
  delay(1000);
  servoPos_F.write(90);
  delay(1000);
  servo_B.write(90);
  delay(1000);
  servoPos_B.write(0);
  delay(1000);
  servo_B.write(0);
  delay(1000);
  servoPos_B.write(90);
  delay(1000);
  
}

void turn_counterClock(){
  servoPos_F.write(0);
  delay(1000);
  servo_F.write(170);
  delay(1000);
  servoPos_F.write(90);
  delay(1000);
  servo_F.write(65);
  delay(1000);
  
  servoPos_R.write(0);
  servoPos_L.write(0);
  delay(1000);
  
  servo_B.write(80);
  servo_F.write(0);
  delay(1000);
  
  servoPos_R.write(90);
  servoPos_L.write(90);
  delay(1000);
  
  
  servoPos_B.write(0);
  delay(1000);
  servo_B.write(0);
  delay(1000);
  servoPos_B.write(90);
  delay(1000);
  servo_F.write(90);
  delay(1000);
  servoPos_F.write(0);
  delay(1000);
  servo_F.write(0);
  delay(1000);
  servoPos_F.write(90);
  delay(1000);
  
}

void F_clockwise(){
    servo_F.write(90);
    delay(1000);
    servoPos_F.write(0);
    delay(1000);
    servo_F.write(0);
    delay(1000);
    servoPos_F.write(90);
    delay(1000);   
}

void F_counterClock(){
    servoPos_F.write(0);
    delay(1000);
    servo_F.write(170);
    delay(1000);
    servoPos_F.write(90);
    delay(1000);
    servo_F.write(65);
    delay(1000);   
    servoPos_F.write(0);
    delay(1000);
    servo_F.write(0);
    delay(1000);
    servoPos_F.write(90);
    delay(1000);
}

void R_clockwise(){
    servo_R.write(90);
    delay(1000);
    servoPos_R.write(0);
    delay(1000);
    servo_R.write(0);
    delay(1000);
    servoPos_R.write(90);
    delay(1000);   
}

void R_counterClock(){
    servoPos_R.write(0);
    delay(1000);
    servo_R.write(170);
    delay(1000);
    servoPos_R.write(90);
    delay(1000);
    servo_R.write(70);
    delay(1000);   
    servoPos_R.write(0);
    delay(1000);
    servo_R.write(0);
    delay(1000);
    servoPos_R.write(90);
    delay(1000);
}

void B_clockwise(){
    servo_B.write(90);
    delay(1000);
    servoPos_B.write(0);
    delay(1000);
    servo_B.write(0);
    delay(1000);
    servoPos_B.write(90);
    delay(1000);   
}

void B_counterClock(){
    servoPos_B.write(0);
    delay(1000);
    servo_B.write(170);
    delay(1000);
    servoPos_B.write(90);
    delay(1000);
    servo_B.write(65);
    delay(1000);   
    servoPos_B.write(0);
    delay(1000);
    servo_B.write(0);
    delay(1000);
    servoPos_B.write(90);
    delay(1000);
}

void L_clockwise(){
    servo_L.write(90);
    delay(1000);
    servoPos_L.write(0);
    delay(1000);
    servo_L.write(0);
    delay(1000);
    servoPos_L.write(90);
    delay(1000);   
}

void L_counterClock(){
    servoPos_L.write(0);
    delay(1000);
    servo_L.write(170);
    delay(1000);
    servoPos_L.write(90);
    delay(1000);
    servo_L.write(65);
    delay(1000);   
    servoPos_L.write(0);
    delay(1000);
    servo_L.write(0);
    delay(1000);
    servoPos_L.write(90);
    delay(1000);
}

void turn_cube(){
    servoPos_B.write(0);
    delay(1000);
    servo_B.write(90);;
    delay(1000);
    servoPos_B.write(90);
    delay(1000);
    
    servoPos_R.write(0);
    servoPos_L.write(0);
    delay(1000);
 
    servo_F.write(90);
    servo_B.write(0);
    delay(2000);
    
    servoPos_R.write(90);
    servoPos_L.write(90);
    delay(1000);
    
    servoPos_F.write(0);
    delay(1000);
    servo_F.write(0);
    delay(1000);
    servoPos_F.write(90);
    delay(1000); 
}

//////////
void recebe_cubo(){

  /*Posição para receber o cubo
   * servos de posição: frente e esquerda no zero, direita e fundo no 90
   */
  servoPos_F.write(pos);
  servoPos_L.write(pos);
  delay(2000);

  servoPos_B.write(pos);
  servoPos_R.write(pos);
  delay(2000);

  pos = 90;
  servoPos_B.write(pos);
  servoPos_R.write(pos);
  delay(4000);

  //segura o cubo
  servoPos_F.write(pos);
  servoPos_L.write(pos);
  delay(2000);
}

void solta_cubo(){
  pos = 0;

  servoPos_F.write(pos);
  servoPos_L.write(pos);
  delay(2000);

  servoPos_B.write(pos);
  servoPos_R.write(pos);
  delay(2000);

  }

  void loop(){
  }

  ///////////
