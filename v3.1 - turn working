#include <Servo.h>
/*
const int middle_peace_position[] PROGMEM ={}
const int corner_2peace_position[] PROGMEM ={}
const int corner_3peace_position[] PROGMEM ={}
*/

// servos para manipulação do cubo
Servo servo_F;
Servo servo_R;
Servo servo_B;
Servo servo_L;

//servos de posição
Servo servoPos_F;
Servo servoPos_R;
Servo servoPos_B;
Servo servoPos_L;

int pos = 0;

void setup(){

  delay(2000);

  servoPos_F.attach(8);
  servoPos_R.attach(9);
  servoPos_B.attach(10);
  servoPos_L.attach(11);

  servo_F.attach(2);
  servo_R.attach(3);
  servo_B.attach(4);
  servo_L.attach(5);

  servo_F.write(0);
  servo_L.write(0);
  servo_B.write(0);
  servo_R.write(0);

  recebe_cubo();
  U_counterClock();
  solta_cubo();
}


int find_face(char color){
  char faces_color[] = "wogrby";
  int i;
  
  for(i = 0; i<6; i++){
    if(faces_color[i] == color) break;
    return i;
  }
}

void map_colors(){
//  char faces_color[] = "wogrby";
  char corner_colors[] ="wwwwooooggggrrrrbbbbyyyy";
  char middle_colors[] ="wwwwooooggggrrrrbbbbyyyy";

  int piece[24] = {17, 13, 9, 5, 4, 12, 24, 18, 3, 16, 21, 6, 2, 20, 22, 10, 1, 8, 23, 14, 11, 15, 19, 7};

  int face_position;
  int buffer_position = 2;
  int piece_position;
  char buffer_color;

  // botar um loop para enquanto o contador de zeros não zerar
  
  buffer_color = middle_colors[buffer_position]; // cor do buffer
  face_position = find_face(buffer_color); // face em que deveria estar
  
  piece_position = piece[buffer_position] - 1;   //posição da peça no vetor
  buffer_color = middle_colors[piece_position]; // face em que a peça deveria estar

  for(int i=0; i<4; i++){
    pos1 = piece[face_position*i]-1;
    for(int j =0; j<4; j++){
      if( piece[pos1]-1 == (piece_position*j)){
        //salva na lista pra onde tem que ir
        //coloca zero nas posições das peças no vetor piece -->verificar se já tinha zero no lugar
        //atualizar o contador de zero --> para saber se todas as posições estão corretas
        //atualizar o buffer com os novos valores e posição
        // repetir o loop até acabar de mapear
        //inserir tratamentos para posições já corretas e para mais de uma sequencia
        i = 4;
        break;
        }
      }
    }


  
  }
 
  
  
void swap(){
  R_clockwise();
  U_clockwise();
  R_counterClock();
  
  F_counterClock();
  
  R_clockwise();
  U_clockwise();
  R_counterClock();

  U_counterClock();
  R_counterClock();
  F_clockwise();
  R_clockwise();
  R_clockwise();

  U_counterClock();
  R_counterClock();
  U_counterClock();
  
  }

////////////////////////////
void U_clockwise(){
  turn_clockwise();
  R_clockwise();
  turn_counterClock();
  
   }

void U_counterClock(){
  turn_clockwise();
  R_counterClock();
  turn_counterClock();
  
   }

void D_clockwise(){
  turn_clockwise();
  L_clockwise();
  turn_counterClock();
  
   }

void D_counterClock(){
  turn_clockwise();
  L_counterClock();
  turn_counterClock();
  
   }
   
void turn_clockwise(){
  servoPos_B.write(0);
  delay(1000);
  servo_B.write(170);
  delay(1000);
  servoPos_B.write(90);
  delay(1000);
  servo_B.write(65);
  delay(1000);
  
  servoPos_R.write(0);
  servoPos_L.write(0);
  delay(1000);
  
  servo_F.write(80);
  servo_B.write(0);
  delay(1000);
  
  servoPos_R.write(90);
  servoPos_L.write(90);
  delay(1000);
  
  
  servoPos_F.write(0);
  delay(1000);
  servo_F.write(0);
  delay(1000);
  servoPos_F.write(90);
  delay(1000);
  servo_B.write(90);
  delay(1000);
  servoPos_B.write(0);
  delay(1000);
  servo_B.write(0);
  delay(1000);
  servoPos_B.write(90);
  delay(1000);
  
}

void turn_counterClock(){
  servoPos_F.write(0);
  delay(1000);
  servo_F.write(170);
  delay(1000);
  servoPos_F.write(90);
  delay(1000);
  servo_F.write(65);
  delay(1000);
  
  servoPos_R.write(0);
  servoPos_L.write(0);
  delay(1000);
  
  servo_B.write(80);
  servo_F.write(0);
  delay(1000);
  
  servoPos_R.write(90);
  servoPos_L.write(90);
  delay(1000);
  
  
  servoPos_B.write(0);
  delay(1000);
  servo_B.write(0);
  delay(1000);
  servoPos_B.write(90);
  delay(1000);
  servo_F.write(90);
  delay(1000);
  servoPos_F.write(0);
  delay(1000);
  servo_F.write(0);
  delay(1000);
  servoPos_F.write(90);
  delay(1000);
  
}

void F_clockwise(){
    servo_F.write(90);
    delay(1000);
    servoPos_F.write(0);
    delay(1000);
    servo_F.write(0);
    delay(1000);
    servoPos_F.write(90);
    delay(1000);   
}

void F_counterClock(){
    servoPos_F.write(0);
    delay(1000);
    servo_F.write(170);
    delay(1000);
    servoPos_F.write(90);
    delay(1000);
    servo_F.write(65);
    delay(1000);   
    servoPos_F.write(0);
    delay(1000);
    servo_F.write(0);
    delay(1000);
    servoPos_F.write(90);
    delay(1000);
}

void R_clockwise(){
    servo_R.write(90);
    delay(1000);
    servoPos_R.write(0);
    delay(1000);
    servo_R.write(0);
    delay(1000);
    servoPos_R.write(90);
    delay(1000);   
}

void R_counterClock(){
    servoPos_R.write(0);
    delay(1000);
    servo_R.write(170);
    delay(1000);
    servoPos_R.write(90);
    delay(1000);
    servo_R.write(70);
    delay(1000);   
    servoPos_R.write(0);
    delay(1000);
    servo_R.write(0);
    delay(1000);
    servoPos_R.write(90);
    delay(1000);
}

void B_clockwise(){
    servo_B.write(90);
    delay(1000);
    servoPos_B.write(0);
    delay(1000);
    servo_B.write(0);
    delay(1000);
    servoPos_B.write(90);
    delay(1000);   
}

void B_counterClock(){
    servoPos_B.write(0);
    delay(1000);
    servo_B.write(170);
    delay(1000);
    servoPos_B.write(90);
    delay(1000);
    servo_B.write(65);
    delay(1000);   
    servoPos_B.write(0);
    delay(1000);
    servo_B.write(0);
    delay(1000);
    servoPos_B.write(90);
    delay(1000);
}

void L_clockwise(){
    servo_L.write(90);
    delay(1000);
    servoPos_L.write(0);
    delay(1000);
    servo_L.write(0);
    delay(1000);
    servoPos_L.write(90);
    delay(1000);   
}

void L_counterClock(){
    servoPos_L.write(0);
    delay(1000);
    servo_L.write(170);
    delay(1000);
    servoPos_L.write(90);
    delay(1000);
    servo_L.write(65);
    delay(1000);   
    servoPos_L.write(0);
    delay(1000);
    servo_L.write(0);
    delay(1000);
    servoPos_L.write(90);
    delay(1000);
}

void turn_cube(){
    servoPos_B.write(0);
    delay(1000);
    servo_B.write(90);;
    delay(1000);
    servoPos_B.write(90);
    delay(1000);
    
    servoPos_R.write(0);
    servoPos_L.write(0);
    delay(1000);
 
    servo_F.write(90);
    servo_B.write(0);
    delay(2000);
    
    servoPos_R.write(90);
    servoPos_L.write(90);
    delay(1000);
    
    servoPos_F.write(0);
    delay(1000);
    servo_F.write(0);
    delay(1000);
    servoPos_F.write(90);
    delay(1000); 
}

//////////
void recebe_cubo(){

  /*Posição para receber o cubo
   * servos de posição: frente e esquerda no zero, direita e fundo no 90
   */
  servoPos_F.write(pos);
  servoPos_L.write(pos);
  delay(2000);

  servoPos_B.write(pos);
  servoPos_R.write(pos);
  delay(2000);

  pos = 90;
  servoPos_B.write(pos);
  servoPos_R.write(pos);
  delay(4000);

  //segura o cubo
  servoPos_F.write(pos);
  servoPos_L.write(pos);
  delay(2000);
}

void solta_cubo(){
  pos = 0;

  servoPos_F.write(pos);
  servoPos_L.write(pos);
  delay(2000);

  servoPos_B.write(pos);
  servoPos_R.write(pos);
  delay(2000);

  }

  void loop(){
  }

  ///////////
